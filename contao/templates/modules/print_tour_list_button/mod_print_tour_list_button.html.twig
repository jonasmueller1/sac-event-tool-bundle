{% extends '@Contao/block_unsearchable' %}

{% block content %}
    {% if watch_event_list_module|default %}
        {% set button_id = 'button_'~ id %}
        <div>
            {% if not has_logged_in_frontend_user() %}
                {# Trigger the login modal window for not logged in users #}
                <button class="btn btn-sm btn-primary" data-sac-login-toggle="modal" data-sac-login-target="same-site" title="Tourliste drucken">
                    <i class="ready fa-solid fa-fw fa-cloud-arrow-down"></i> Tour-Liste drucken
                </button>
            {% else %}
                <button id="{{ button_id }}" class="btn btn-sm btn-primary" disabled data-url title="Tourliste drucken">
                    <i class="ready fa-solid fa-fw fa-cloud-arrow-down"></i>
                    <i class="busy fa-solid fa-fw fa-sync fa-spin"></i> Tour-Liste drucken
                </button>
            {% endif %}
        </div>

        <div class="toast-container position-fixed top-0 start-0 p-3">
            <div id="download-info-toast" class="toast" role="alert" data-bs-autohide="false" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <span class="me-auto text-danger small">
                        <i class="fa-solid fa-circle-info"></i> <strong>Hallo {{ insert_tag('user::firstname') }}!</strong>
                    </span>
                    <!--<small>11 mins ago</small>-->
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body bg-white">
                    <small>
                        Deine Tour-Liste wird jetzt im Hintergrund für dich zusammengestellt. Das kann je nach Anzahl gewählter Touren einige Minuten dauern.<br>
                        Du darfst aber in dieser Zeit gerne auf https://www.sac-pilatus.ch weitersurfen, dich aber nicht abmelden.
                        Sobald die Tour-Liste bereit ist für den Download, wirst du auf dieser Webseite wieder benachrichtigt.
                    </small>
                </div>
            </div>
        </div>

        {% do addHtmlToHead('
            <style>
            .mod_print_tour_list_button button .ready {
                display:inline;
            }
            .mod_print_tour_list_button button .busy {
                display:none;
            }
            .mod_print_tour_list_button button[disabled] .ready {
                display:none;
            }
            .mod_print_tour_list_button button[disabled] .busy {
                display:inline;
            }
            </style>
        ') %}

        <script{{ attrs().setIfExists('nonce', csp_nonce('script-src')) }}>
            // Listen to sac_evt.event_list.pre_fetch event
            // and inject the last fetch url to the buttons data-url attribute
            document.addEventListener('sac_evt.event_list.pre_fetch', (e) => {

                if (e.detail.modId.toString() !== '{{ watch_event_list_module }}') {
                    return;
                }

                let button = document.getElementById('{{ button_id }}');

                if (button && e.detail.url) {
                    button.removeAttribute('disabled');

                    button.dataset.url = btoa(e.detail.url);
                    button.addEventListener("click", async (e) => {

                        // Get the button element
                        //const btn = e.currentTarget;

                        // Prevent multiple clicks
                        button.setAttribute('disabled', '');

                        e.preventDefault();
                        e.stopPropagation();

                        // base64 decode the url stored in the data-url attribute
                        const url = decodeURI(atob(e.currentTarget.dataset.url));

                        // Remove offset, limit and fields from param string
                        strParams = Util.removeParam(url, ['offset', 'limit', 'fields', 'fields[]']);
                        const href1 = window.location.protocol + '//' + window.location.hostname + '/eventApi/events?' + strParams;

                        // Get the event IDS without limit and offset from the server!
                        const response = await fetch(href1);
                        const arrJSON = await response.json();
                        const arrIDS = arrJSON.meta.arrEventIds;

                        if (!arrIDS.length) {
                            alert('Die Tourliste ist leer und kann nicht gedruckt werden. Ändere die Filtereinstellungen.');
                            button.removeAttribute('disabled', '');
                            return;
                        }

                        // Add an uuid
                        const uuid = window.crypto.randomUUID();

                        // Build url for the docx/pdf controller
                        const href = '_print_tour_list/init_download?ids=' + arrIDS.join(',') + '&uuid=' + uuid;

                        try {
                            // Call the docx/pdf controller
                            //window.location.href = href2;
                            const resp = await fetch(href);

                            if (resp.ok) {
                                button.removeAttribute('disabled');

                                // Show info toast
                                const toast = document.getElementById('download-info-toast');
                                const toastInstance = new bootstrap.Toast(toast);
                                toastInstance.show();
                                function play(){
                                    var audio = new Audio("https://res.cloudinary.com/dxfq3iotg/video/upload/v1557233294/info.mp3");
                                    audio.play();
                                }
                                play();
                            }
                        } catch (e) {
                            button.removeAttribute('disabled');
                            alert('Die Tour-Liste kann nicht heruntergeladen werden.')
                        }
                    });
                }

                Util = {
                    removeParam: function (strUrl, arrParams) {
                        const url = new URL(strUrl);
                        const params = new URLSearchParams(url.search);

                        for (const param of arrParams) {
                            params.delete(param);
                        }

                        return params.toString();
                    }
                }
            });
        </script>
    {% endif %}

{% endblock %}
