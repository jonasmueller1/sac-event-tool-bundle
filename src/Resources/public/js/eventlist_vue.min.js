"use strict";class VueTourList{constructor(elId,opt){const defaults={apiParams:{organizers:[],eventType:["tour","generalEvent","lastMinuteTour"],suitableForBeginners:"",tourType:"",courseType:"",courseId:"",year:"",dateStart:"",textsearch:"",eventId:"",username:"",calendarIds:[],limit:"50",offset:"0"},fields:[],callbacks:{oninsert:function(vue,json){}}};let params=_.merge(defaults,opt);new Vue({el:elId,created:function created(){let self=this;self.prepareRequest()},data:function data(){return{apiParams:params.apiParams,fields:params.fields&&Array.isArray(params.fields)?params.fields:null,callbacks:params.callbacks,rows:[],arrEventIds:[],blnIsBusy:false,itemsTotal:0,loadedItems:0,blnAllEventsLoaded:false}},methods:{prepareRequest:function prepareRequest(){let self=this;if(self.blnIsBusy===false){self.blnIsBusy=true;self.getDataByXhr();console.log("Loading events...")}},getDataByXhr:function getDataByXhr(){let self=this;if(self.blnAllEventsLoaded===true){return}let formData=new FormData;for(let prop in self.apiParams){let property=self.apiParams[prop];if(prop==="offset"){formData.append("offset",parseInt(self.apiParams.offset)+self.loadedItems)}else if(Array.isArray(property)){for(let i=0;i<property.length;++i){formData.append(prop+"[]",property[i])}}else{formData.append(prop,property)}}for(let i=0;i<self.fields.length;++i){formData.append("fields[]",self.fields[i])}let params=new URLSearchParams(Array.from(formData)).toString();fetch("eventApi/events?"+params,{headers:{"x-requested-with":"XMLHttpRequest"}}).then(function(res){return res.json()}).then(function(json){self.blnIsBusy=false;let i=0;self.itemsTotal=parseInt(json["meta"]["itemsTotal"]);json["data"].forEach(function(row){i++;self.rows.push(row);self.loadedItems++});json["meta"]["arrEventIds"].forEach(function(id){self.arrEventIds.push(id)});if(i===0||parseInt(json["meta"]["itemsTotal"])===self.loadedItems){self.blnAllEventsLoaded=true}if(self.blnAllEventsLoaded===true){console.log("Finished downloading process. "+self.loadedItems+" events loaded.")}return json}).then(function(json){if(self.callbackExists("oninsert")){self.callbacks.oninsert(self,json)}return json})},callbackExists:function callbackExists(strCallback){let self=this;if(typeof self.callbacks!=="undefined"&&typeof self.callbacks[strCallback]!=="undefined"&&typeof self.callbacks[strCallback]==="function"){return true}return false}}})}}